import streamlit as st
import pandas as pd
import plotly.express as px
from llama_index.llms.groq import Groq
from llama_index.core.agent import ReActAgent

def preprocess_data(df):
    """Handle missing values and convert data types dynamically."""
    df = df.fillna(0)
    return df

def get_ai_insights_and_code(llm, ai_prompt):
    """Generate insights and visualization code using the LLM."""
    agent = ReActAgent.from_tools([], llm=llm, verbose=True)
    response = agent.chat(ai_prompt)
    if response:
        return response.response.strip()
    return "No insights generated."

def main():
    st.set_page_config(layout="wide")
    st.title("üìä Marketing Data Visualizer with AI Insights")

    # Sidebar for input configurations
    st.sidebar.header("1Ô∏è‚É£ Upload & Configure")
    uploaded_file = st.sidebar.file_uploader("Upload your dataset (CSV file)", type=["csv"])

    # Choose LLM model and API key
    llm_choice = st.sidebar.selectbox("Select AI Model", ["Groq (Llama3-70B)"])
    api_key = st.sidebar.text_input("Enter API Key", type="password")

    if uploaded_file is not None and api_key:
        try:
            # Load CSV directly from the uploaded file into a pandas DataFrame
            df = pd.read_csv(uploaded_file)
            
            # Preprocess data
            df = preprocess_data(df)
            st.sidebar.success("‚úÖ Dataset uploaded and processed successfully!")

            # Let user describe the relationship they want to analyze
            user_input = st.text_input("Describe the relationship you want to analyze (e.g., 'I want to see the relation between X and Y')")

            if user_input:
                # Initialize LLM
                llm = Groq(model="llama3-70b-8192", api_key=api_key)

                # Construct the prompt to send to the AI model
                ai_prompt = f"""
                    You are an AI specialized in marketing analysis. 
                    The user has uploaded a dataset with the following columns: {list(df.columns)}.
                    The user describes the relationship they want to analyze: "{user_input}"
                    Based on this description, suggest the best way to visualize the data and provide the relevant Python code to generate the chart.
                    Then, analyze the chart for trends, correlations, and patterns and provide AI-generated insights.
                    Please return both the Python code for the chart and the insights.
                """
                
                # Get AI insights and code
                ai_response = get_ai_insights_and_code(llm, ai_prompt)
                
                # Display Python code and insights
                if ai_response:
                    st.subheader("üí° AI-Generated Insights and Code")
                    st.write(ai_response)
                    
                    # Execute the Python code generated by AI and show the plot (code execution needs to be parsed and executed)
                    try:
                        exec(ai_response)  # Note: This needs careful handling in production!
                    except Exception as e:
                        st.error(f"Error executing code: {e}")

        except Exception as e:
            st.error(f"Error: {str(e)}")
    
    else:
        st.info("Upload a dataset and enter an API key to proceed.")

if __name__ == "__main__":
    main()
